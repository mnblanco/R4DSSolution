[
["relational-data.html", "5 Relational data 5.1 Exercises 5.2 Exercises 13.3.1 5.3 Exercises 13.4.6", " 5 Relational data 5.1 Exercises Imagine you wanted to draw (approximately) the route each plane flies from its origin to its destination. What variables would you need? What tables would you need to combine? flights table: origin and dest variables head(flights %&gt;% select(origin, dest)) #&gt; # A tibble: 6 x 2 #&gt; origin dest #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 EWR IAH #&gt; 2 LGA IAH #&gt; 3 JFK MIA #&gt; 4 JFK BQN #&gt; 5 LGA ATL #&gt; 6 EWR ORD airports table: faa (matches the origin and destination), longitude and latitude variables head(airports %&gt;% select(lon, lat, faa)) #&gt; # A tibble: 6 x 3 #&gt; lon lat faa #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 -80.6 41.1 04G #&gt; 2 -85.7 32.5 06A #&gt; 3 -88.1 42.0 06C #&gt; 4 -74.4 41.4 06N #&gt; 5 -81.4 31.1 09J #&gt; 6 -82.2 36.4 0A9 join flights with airports. The first join adds the location of the origin airport (origin) and the second join adds the location of destination airport (dest). I forgot to draw the relationship between weather and airports. What is the relationship and how should it appear in the diagram? The variable origin in weather is the same as faa in airports. head(weather %&gt;% select(origin)) #&gt; # A tibble: 6 x 1 #&gt; origin #&gt; &lt;chr&gt; #&gt; 1 EWR #&gt; 2 EWR #&gt; 3 EWR #&gt; 4 EWR #&gt; 5 EWR #&gt; 6 EWR head(airports %&gt;% select(faa) %&gt;% filter(faa == &quot;EWR&quot;)) #&gt; # A tibble: 1 x 1 #&gt; faa #&gt; &lt;chr&gt; #&gt; 1 EWR weather only contains information for the origin (NYC) airports. If it contained weather records for all airports in the USA, what additional relation would it define with flights? origin would need to change to location year, month, day, hour, origin in weather should match to year, month, day, arr_time, dest in flight head(weather) #&gt; # A tibble: 6 x 15 #&gt; origin year month day hour temp dewp humid wind_dir wind_speed #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 EWR 2013 1 1 1 39.0 26.1 59.4 270 10.4 #&gt; 2 EWR 2013 1 1 2 39.0 27.0 61.6 250 8.06 #&gt; 3 EWR 2013 1 1 3 39.0 28.0 64.4 240 11.5 #&gt; 4 EWR 2013 1 1 4 39.9 28.0 62.2 250 12.7 #&gt; 5 EWR 2013 1 1 5 39.0 28.0 64.4 260 12.7 #&gt; 6 EWR 2013 1 1 6 37.9 28.0 67.2 240 11.5 #&gt; # ... with 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, #&gt; # pressure &lt;dbl&gt;, visib &lt;dbl&gt;, time_hour &lt;dttm&gt; head(flights) #&gt; # A tibble: 6 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 1 517 515 2 830 #&gt; 2 2013 1 1 533 529 4 850 #&gt; 3 2013 1 1 542 540 2 923 #&gt; 4 2013 1 1 544 545 -1 1004 #&gt; 5 2013 1 1 554 600 -6 812 #&gt; 6 2013 1 1 554 558 -4 740 #&gt; # ... with 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, #&gt; # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, #&gt; # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, #&gt; # time_hour &lt;dttm&gt; We know that some days of the year are “special”, and fewer people than usual fly on them. How might you represent that data as a data frame? What would be the primary keys of that table? How would it connect to the existing tables? The table special_days would contain a list of day where fewer people travel than usual. Primary key: year, month, day should match year, month, and day in flight special_days &lt;- tribble( ~year, ~month, ~day, ~holiday, 2019, 01, 01, &quot;New Years Day&quot;, 2018, 12, 25, &quot;Christmas Day&quot; ) 5.2 Exercises 13.3.1 Add a surrogate key to flights. flights #&gt; # A tibble: 336,776 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 1 517 515 2 830 #&gt; 2 2013 1 1 533 529 4 850 #&gt; 3 2013 1 1 542 540 2 923 #&gt; 4 2013 1 1 544 545 -1 1004 #&gt; 5 2013 1 1 554 600 -6 812 #&gt; 6 2013 1 1 554 558 -4 740 #&gt; # ... with 3.368e+05 more rows, and 12 more variables: #&gt; # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, #&gt; # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; flights %&gt;% arrange(year, month, day, sched_dep_time, carrier, flight) %&gt;% mutate(flight_id = row_number()) %&gt;% glimpse() #&gt; Observations: 336,776 #&gt; Variables: 20 #&gt; $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,... #&gt; $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ dep_time &lt;int&gt; 517, 533, 542, 544, 554, 559, 558, 559, 558, 55... #&gt; $ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 558, 559, 600, 600, 600, 60... #&gt; $ dep_delay &lt;dbl&gt; 2, 4, 2, -1, -4, 0, -2, -1, -2, -2, -3, NA, 1, ... #&gt; $ arr_time &lt;int&gt; 830, 850, 923, 1004, 740, 702, 753, 941, 849, 8... #&gt; $ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 728, 706, 745, 910, 851, 8... #&gt; $ arr_delay &lt;dbl&gt; 11, 20, 33, -18, 12, -4, 8, 31, -2, -3, -8, NA,... #&gt; $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;AA&quot;, &quot;AA&quot;,... #&gt; $ flight &lt;int&gt; 1545, 1714, 1141, 725, 1696, 1806, 301, 707, 49... #&gt; $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N39463... #&gt; $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;EWR&quot;, &quot;JFK&quot;, &quot;LGA&quot;... #&gt; $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ORD&quot;, &quot;BOS&quot;, &quot;ORD&quot;... #&gt; $ air_time &lt;dbl&gt; 227, 227, 160, 183, 150, 44, 138, 257, 149, 158... #&gt; $ distance &lt;dbl&gt; 1400, 1416, 1089, 1576, 719, 187, 733, 1389, 10... #&gt; $ hour &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,... #&gt; $ minute &lt;dbl&gt; 15, 29, 40, 45, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0,... #&gt; $ time_hour &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013... #&gt; $ flight_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ... flights %&gt;% count(year, month, day, sched_dep_time, carrier, flight) %&gt;% filter(n &gt; 1) #&gt; # A tibble: 0 x 7 #&gt; # ... with 7 variables: year &lt;int&gt;, month &lt;int&gt;, day &lt;int&gt;, #&gt; # sched_dep_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, n &lt;int&gt; Identify the keys in the following datasets Lahman::Batting head(Lahman::Batting) #&gt; playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB #&gt; 1 abercda01 1871 1 TRO NA 1 4 0 0 0 0 0 0 0 0 0 #&gt; 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 13 8 1 4 #&gt; 3 allisar01 1871 1 CL1 NA 29 137 28 40 4 5 0 19 3 1 2 #&gt; 4 allisdo01 1871 1 WS3 NA 27 133 28 44 10 2 2 27 1 1 0 #&gt; 5 ansonca01 1871 1 RC1 NA 25 120 29 39 11 3 0 16 6 2 2 #&gt; 6 armstbo01 1871 1 FW1 NA 12 49 9 11 2 1 0 5 0 1 0 #&gt; SO IBB HBP SH SF GIDP #&gt; 1 0 NA NA NA NA NA #&gt; 2 0 NA NA NA NA NA #&gt; 3 5 NA NA NA NA NA #&gt; 4 2 NA NA NA NA NA #&gt; 5 1 NA NA NA NA NA #&gt; 6 1 NA NA NA NA NA Lahman::Batting %&gt;% count(playerID, yearID, stint) %&gt;% filter(n &gt; 1) #&gt; # A tibble: 0 x 4 #&gt; # ... with 4 variables: playerID &lt;chr&gt;, yearID &lt;int&gt;, stint &lt;int&gt;, n &lt;int&gt; babynames::babynames head(babynames::babynames) #&gt; # A tibble: 6 x 5 #&gt; year sex name n prop #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1880 F Mary 7065 0.0724 #&gt; 2 1880 F Anna 2604 0.0267 #&gt; 3 1880 F Emma 2003 0.0205 #&gt; 4 1880 F Elizabeth 1939 0.0199 #&gt; 5 1880 F Minnie 1746 0.0179 #&gt; 6 1880 F Margaret 1578 0.0162 babynames::babynames %&gt;% count(year, sex, name) %&gt;% filter(nn &gt; 1) #&gt; # A tibble: 0 x 4 #&gt; # ... with 4 variables: year &lt;dbl&gt;, sex &lt;chr&gt;, name &lt;chr&gt;, nn &lt;int&gt; nasaweather::atmos head(nasaweather::atmos) #&gt; # A tibble: 6 x 11 #&gt; lat long year month surftemp temp pressure ozone cloudlow cloudmid #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 36.2 -114. 1995 1 273. 272. 835 304 7.5 34.5 #&gt; 2 33.7 -114. 1995 1 280. 282. 940 304 11.5 32.5 #&gt; 3 31.2 -114. 1995 1 285. 285. 960 298 16.5 26 #&gt; 4 28.7 -114. 1995 1 289. 291. 990 276 20.5 14.5 #&gt; 5 26.2 -114. 1995 1 292. 293. 1000 274 26 10.5 #&gt; 6 23.7 -114. 1995 1 294. 294. 1000 264 30 9.5 #&gt; # ... with 1 more variable: cloudhigh &lt;dbl&gt; nasaweather::atmos %&gt;% count(lat, long, year, month) %&gt;% filter(n &gt; 1) #&gt; # A tibble: 0 x 5 #&gt; # ... with 5 variables: lat &lt;dbl&gt;, long &lt;dbl&gt;, year &lt;int&gt;, month &lt;int&gt;, #&gt; # n &lt;int&gt; fueleconomy::vehicles head(fueleconomy::vehicles) #&gt; # A tibble: 6 x 12 #&gt; id make model year class trans drive cyl displ fuel hwy cty #&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 27550 AM Ge… DJ P… 1984 Spec… Auto… 2-Wh… 4 2.5 Regu… 17 18 #&gt; 2 28426 AM Ge… DJ P… 1984 Spec… Auto… 2-Wh… 4 2.5 Regu… 17 18 #&gt; 3 27549 AM Ge… FJ8c… 1984 Spec… Auto… 2-Wh… 6 4.2 Regu… 13 13 #&gt; 4 28425 AM Ge… FJ8c… 1984 Spec… Auto… 2-Wh… 6 4.2 Regu… 13 13 #&gt; 5 1032 AM Ge… Post… 1985 Spec… Auto… Rear… 4 2.5 Regu… 17 16 #&gt; 6 1033 AM Ge… Post… 1985 Spec… Auto… Rear… 6 4.2 Regu… 13 13 fueleconomy::vehicles %&gt;% count(id) %&gt;% filter(n &gt; 1) #&gt; # A tibble: 0 x 2 #&gt; # ... with 2 variables: id &lt;int&gt;, n &lt;int&gt; ggplot2::diamonds head(ggplot2::diamonds) #&gt; # A tibble: 6 x 10 #&gt; carat cut color clarity depth table price x y z #&gt; &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 #&gt; 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 #&gt; 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 #&gt; 4 0.290 Premium I VS2 62.4 58 334 4.2 4.23 2.63 #&gt; 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 #&gt; 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ggplot2::diamonds %&gt;% distinct() %&gt;% nrow() #&gt; [1] 53794 nrow(ggplot2::diamonds) #&gt; [1] 53940 (You might need to install some packages and read some documentation.) Draw a diagram illustrating the connections between the Batting, Master, and Salaries tables in the Lahman package. Draw another diagram that shows the relationship between Master, Managers, AwardsManagers. Master Primary keys: playerID Batting Primary keys: yearID, yearID, stint Foreign Keys: playerID = Master$playerID (many-to-1) Salaries Primary keys: yearID, teamID, playerID Foreign Keys playerID = Master$playerID (many-to-1) dm1 &lt;- dm_from_data_frames(list(Batting = Lahman::Batting, Master = Lahman::Master, Salaries = Lahman::Salaries)) %&gt;% dm_set_key(&quot;Batting&quot;, c(&quot;playerID&quot;, &quot;yearID&quot;, &quot;stint&quot;)) %&gt;% dm_set_key(&quot;Master&quot;, &quot;playerID&quot;) %&gt;% dm_set_key(&quot;Salaries&quot;, c(&quot;yearID&quot;, &quot;teamID&quot;, &quot;playerID&quot;)) %&gt;% dm_add_references( Batting$playerID == Master$playerID, Salaries$playerID == Master$playerID ) dm_create_graph(dm1, rankdir = &quot;LR&quot;, columnArrows = TRUE) How would you characterise the relationship between the Batting, Pitching, and Fielding tables? 5.3 Exercises 13.4.6 Compute the average delay by destination, then join on the airports data frame so you can show the spatial distribution of delays. Here’s an easy way to draw a map of the United States: airports %&gt;% semi_join(flights, c(“faa” = “dest”)) %&gt;% ggplot(aes(lon, lat)) + borders(“state”) + geom_point() + coord_quickmap() (Don’t worry if you don’t understand what semi_join() does — you’ll learn about it next.) You might want to use the size or colour of the points to display the average delay for each airport. Add the location of the origin and destination (i.e. the lat and lon) to flights. Is there a relationship between the age of a plane and its delays? What weather conditions make it more likely to see a delay? What happened on June 13 2013? Display the spatial pattern of delays, and then use Google to cross-reference with the weather. "]
]
