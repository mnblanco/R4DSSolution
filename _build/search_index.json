[
["data-visualisation.html", "2 Data Visualisation 2.1 Introduction 2.2 First Steps 2.3 Aesthetic mappings 2.4 Common problems 2.5 Facets 2.6 Geometric Objects 2.7 Statistical Transformations 2.8 Position Adjustments 2.9 Coordinate Systems 2.10 The Layered Grammar of Graphics", " 2 Data Visualisation 2.1 Introduction library(&quot;tidyverse&quot;) No exercises. 2.2 First Steps # mpg contains observations collected by the US Environment Protection Agency on 38 models of car. mpg #&gt; # A tibble: 234 x 11 #&gt; manufacturer model displ year cyl trans drv cty hwy fl class #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 audi a4 1.8 1999 4 auto(… f 18 29 p comp… #&gt; 2 audi a4 1.8 1999 4 manua… f 21 29 p comp… #&gt; 3 audi a4 2 2008 4 manua… f 20 31 p comp… #&gt; 4 audi a4 2 2008 4 auto(… f 21 30 p comp… #&gt; 5 audi a4 2.8 1999 6 auto(… f 16 26 p comp… #&gt; 6 audi a4 2.8 1999 6 manua… f 18 26 p comp… #&gt; # ... with 228 more rows # shows a negative relationship between engine size (displ) and fuel efficiency (hwy) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) Exercise 3.2.4.1. Run ggplot(data = mpg) what do you see? ggplot(data = mpg) An empty plot. The background of the plot is created by ggplot(), but nothing else is displayed. Exercise 3.2.4.2. How many rows are in mtcars? How many columns? There are 32 rows and 11 columns in the mtcars data frame. nrow(mtcars) #&gt; [1] 32 ncol(mtcars) #&gt; [1] 11 The number of rows and columns is displayed by glimpse(): glimpse(mtcars) #&gt; Observations: 32 #&gt; Variables: 11 #&gt; $ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.... #&gt; $ cyl &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, ... #&gt; $ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1... #&gt; $ hp &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, ... #&gt; $ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9... #&gt; $ wt &lt;dbl&gt; 2.62, 2.88, 2.32, 3.21, 3.44, 3.46, 3.57, 3.19, 3.15, 3.4... #&gt; $ qsec &lt;dbl&gt; 16.5, 17.0, 18.6, 19.4, 17.0, 20.2, 15.8, 20.0, 22.9, 18.... #&gt; $ vs &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, ... #&gt; $ am &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, ... #&gt; $ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, ... #&gt; $ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, ... Exercise 3.2.4.3. What does the drv variable describe? Read the help for ?mpg to find out. The drv categorizes cars by which wheels the engine provides torque to, or drives: the front two wheels (f), the rear two wheels (r), or all four wheels (4wd).[^layout] Value Description &quot;f&quot; [front-wheel drive] &quot;r&quot; [rear-wheel drive] &quot;4&quot; [four-wheel drive] Exercise 3.2.4.4. Make a scatter plot of hwy vs cyl. ggplot(mpg, aes(x = hwy, y = cyl)) + geom_point() Exercise 3.2.4.5. What happens if you make a scatter plot of class vs drv. Why is the plot not useful? ggplot(mpg, aes(x = class, y = drv)) + geom_point() A scatter plot is not a useful way to plot these variables, since both drv and class are factor variables taking a limited number of values. count(mpg, drv, class) #&gt; # A tibble: 12 x 3 #&gt; drv class n #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 4 compact 12 #&gt; 2 4 midsize 3 #&gt; 3 4 pickup 33 #&gt; 4 4 subcompact 4 #&gt; 5 4 suv 51 #&gt; 6 f compact 35 #&gt; # ... with 6 more rows The scatter plot cannot show which are overlapping or not. 2.3 Aesthetic mappings # map the colors of your points to the class variable ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) # map the size of your points to the class variable ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class)) #&gt; Warning: Using size for a discrete variable is not advised. # alpha aesthetic, which controls the transparency of the points, or the shape of the points # Left ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class)) #&gt; Warning: Using alpha for a discrete variable is not advised. # Right ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class)) #&gt; Warning: The shape palette can deal with a maximum of 6 discrete values #&gt; because more than 6 becomes difficult to discriminate; you have 7. #&gt; Consider specifying shapes manually if you must have them. #&gt; Warning: Removed 62 rows containing missing values (geom_point). ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) Exercise 3.3.1.1 What’s gone wrong with this code? Why are the points not blue? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = &quot;blue&quot;)) Since colour = &quot;blue&quot; is within the mapping argument, it was treated as an aesthetic (a mapping between a variable and a value). The expression, color=&quot;blue&quot;, treats &quot;blue&quot; as a variable with only one value: &quot;blue&quot;. If this is confusing, consider how colour = 1:234 or colour = 1 would be interpreted by aes(). ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) Exercise 3.3.1.2 Which variables in mpg are categorical? Which variables are continuous? (Hint: type ?mpg to read the documentation for the dataset). How can you see this information when you run mpg? ?mpg When printing the data frame, this information is given at the top of each column within angled brackets. Categorical variables have a class of “character” (&lt;chr&gt;). mpg #&gt; # A tibble: 234 x 11 #&gt; manufacturer model displ year cyl trans drv cty hwy fl class #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 audi a4 1.8 1999 4 auto(… f 18 29 p comp… #&gt; 2 audi a4 1.8 1999 4 manua… f 21 29 p comp… #&gt; 3 audi a4 2 2008 4 manua… f 20 31 p comp… #&gt; 4 audi a4 2 2008 4 auto(… f 21 30 p comp… #&gt; 5 audi a4 2.8 1999 6 auto(… f 16 26 p comp… #&gt; 6 audi a4 2.8 1999 6 manua… f 18 26 p comp… #&gt; # ... with 228 more rows Alternatively, glimpse() displays the type of each column: glimpse(mpg) #&gt; Observations: 234 #&gt; Variables: 11 #&gt; $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;... #&gt; $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 qua... #&gt; $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0,... #&gt; $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1... #&gt; $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6... #&gt; $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)... #&gt; $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... #&gt; $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 1... #&gt; $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 2... #&gt; $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... #&gt; $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;comp... Exercise 3.3.1.3 Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables? The variable cty, city highway miles per gallon, is a continuous variable: ggplot(mpg, aes(x = displ, y = hwy, colour = cty)) + geom_point() Instead of using discrete colors, the continuous variable uses a scale that varies from a light to dark blue color. ggplot(mpg, aes(x = displ, y = hwy, size = cty)) + geom_point() When mapped to size, the sizes of the points vary continuously with respect to the size (although the legend shows a few representative values) ggplot(mpg, aes(x = displ, y = hwy, shape = cty)) + geom_point() #&gt; Error: A continuous variable can not be mapped to shape When a continuous value is mapped to shape, it gives an error. Though we could split a continuous variable into discrete categories and use a shape aesthetic, this would conceptually not make sense. A continuous numeric variable is ordered, but shapes have no natural order. It is clear that smaller points correspond to smaller values, or once the color scale is given, which colors correspond to larger or smaller values. But it is not clear whether a square is greater or less than a circle. Exercise 3.3.1.4 What happens if you map the same variable to multiple aesthetics? ggplot(mpg, aes(x = displ, y = hwy, colour = hwy, size = displ)) + geom_point() In the above plot, hwy is mapped to both location on the y-axis and color, and displ is mapped to both location on the x-axis and size. The code works and produces a plot, even if it is a bad one. Mapping a single variable to multiple aesthetics is redundant. Because it is redundant information, in most cases avoid mapping a single variable to multiple aesthetics. Exercise 3.3.1.5 What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point) Stroke changes the size of the border for shapes (21-25). These are filled shapes in which the color and size of the border can differ from that of the filled interior of the shape. For example ggplot(mtcars, aes(wt, mpg)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 5, stroke = 5) Exercise 3.3.1.6. What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ &lt; 5)? ggplot(mpg, aes(x = displ, y = hwy, colour = displ &lt; 5)) + geom_point() Aesthetics can also be mapped to expressions (code like displ &lt; 5). It will create a temporary variable which takes values from the result of the expression. In this case, it is logical variable which is TRUE or FALSE. This also explains exercise 1, colour = &quot;blue&quot; created a categorical variable that only had one category: “blue”. 2.4 Common problems # put the + in the wrong place, come at the end of the line ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) No exercises 2.5 Facets # variable that you pass to facet_wrap() should be discrete ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) # drv &gt; Levels: 4 f r # cyl &gt; Levels: 4 5 6 8 ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl) Exercise 3.5.1.1 What happens if you facet on a continuous variable? ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() + facet_grid(. ~ cty) Does not visualize well. It converts the continuous variable to a factor and creates facets for all unique values of it. Exercise 3.5.1.2 What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot? They are cells in which there are no values of the combination of drv and cyl. ggplot(data = mpg) + geom_point(mapping = aes(x = drv, y = cyl)) There is no combination of 5 cyl and 4 drv (5-4), 4-R, and 5-R. The locations in the above plot without points are the same cells in facet_grid(drv ~ cyl) that have no points. Exercise 3.5.1.3 What plots does the following code make? What does . do? The symbol . ignores that dimension for faceting. This plot facets by values of drv on the y-axis: # rows (horizontal facet) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .) This plot facets by values of cyl on the x-axis: # columns (vertical facet) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl) Exercise 3.5.1.4 Take the first faceted plot in this section: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) What are the advantages to using faceting instead of the colour aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset? This is what the plot looks like when class is represented by the colour the color aesthetic instead of faceting. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) Advantages of encoding class with facets instead of color include the ability to encode more distinct categories. For me, it is difficult to distinguish color of &quot;midsize&quot; and the teal of &quot;minivan&quot; points are difficult to distinguish. Given human visual perception, the max number of colors to use when encoding unordered categorical (qualitative) data is nine, and in practice, often much less than that. Also, while placing points in different categories in different scales makes it difficult to directly compare values of individual points in different categories, it can make it easier to compare patterns between categories. Disadvantages of encoding class with facets instead of color are that different the different class is that the points for each category are on different plots, making it more difficult to directly compare the locations of individual points. Using the same x- and y-scales for all facets lessens this disadvantage. Since encoding class within color also places all points on the same plot, it visualizes the unconditional relationship between the x and y variables; with facets, the unconditional relationship is no longer visualized since the points are spread across multiple plots. The benefits encoding a variable through facetting over color become more advantageous as either the number of points or the number of categories increase. In the former, as the number of points increase, there is likely to be more overlap. It is difficult to handle overlapping points with color. Jittering will still work with color. But jittering will only work well if there are few points and the classes do not overlap much, otherwise the colors of areas will no longer be distinct and it will be hard to visually pick out the patterns of different categories. Transparency (alpha) does not work well with colors since the mixing of overlapping transparent colors will no longer represent the colors of the categories. Binning methods use already color to encode density, so color cannot be used to encode categories. As noted before, as the number of categories increases, the difference between colors decreases, to the point that the color of categories will no longer be visually distinct. Exercise 3.5.1.5 Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol variables? The arguments nrow (ncol) determines the number of rows (columns) to use when laying out the facets. It is necessary since facet_wrap() only facets on one variable. These arguments are unnecessary for facet_grid() since the number of rows and columns are determined by the number of unique values of the variables specified. # wraps a 1d sequence of panels into 2d ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 3) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 4) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, ncol = 2) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, ncol = 3) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, ncol = 4) # forms a matrix of panels defined by row and column faceting variables. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(~ class) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(cols = vars(class)) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(rows = vars(class)) Exercise 3.5.1.6 When using facet_grid() you should usually put the variable with more unique levels in the columns. Why? IF the plot is laid out horizontally, there will be more space for columns. You should put the variable with more unique levels in the columns if the plot is laid out landscape. It is easier to compare relative levels of y by scanning horizontally, so it may be easier to visually compare these levels. #Levels: 2seater compact midsize minivan pickup subcompact suv (7 levels for class) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(cols = vars(class)) #Levels: 4 5 6 8 (4 levels for cyl) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(cols = vars(cyl)) 2.6 Geometric Objects # left ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) # right ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; # will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE ) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth() #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == &quot;subcompact&quot;), se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Exercise 3.6.1.1 What geom would you use to draw a line chart? A boxplot? A histogram? An area chart? line chart: geom_line() boxplot: geom_boxplot() histogram: geom_hist() area chart: geom_area() Exercise 3.6.1.2 Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions. This will produce a scatter plot with displ on the x-axis, hwy on the y-axis. The points will be colored by drv. The plot will include a smooth line, without standard errors, fit through each drv group. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, colour = drv)) + geom_point() + geom_smooth(se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Exercise 3.6.1.3 What does show.legend = FALSE do? What happens if you remove it? Why do you think I used it earlier in the chapter? show.legend is used show or hides the legend box. In this code, without show legend, there is a legend. By default show.legend = TRUE: ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, colour = drv), ) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; In this code, there is no legend in this code: ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, colour = drv), show.legend = FALSE ) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; In the example earlier in the chapter, ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg) + geom_smooth( mapping = aes(x = displ, y = hwy, colour = drv), show.legend = FALSE ) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; the legend is suppressed because there are three plots, and adding a legend that only appears in the last one would make the presentation asymmetric. Additionally, the purpose of this plot is to illustrate the difference between not grouping, using a group aesthetic, and using a color aesthetic (with implicit grouping). In that example, the legend isn’t necessary since looking up the values associated with each color isn’t necessary to make that point. Exercise 3.6.1.4 What does the se argument to geom_smooth() do? se argument adds standard error bands to the lines. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, colour = drv)) + geom_point() + geom_smooth(se = TRUE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; By default se = TRUE: ggplot(data = mpg, mapping = aes(x = displ, y = hwy, colour = drv)) + geom_point() + geom_smooth() #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Exercise 3.6.1.5 Will these two graphs look different? Why/why not? No. Because both geom_point() and geom_smooth() use the same data and mappings. They will inherit those options from the ggplot() object, and thus don’t need to specified again (or twice). ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Exercise 3.6.1.6 Recreate the R code necessary to generate the following graphs. ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth(se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(group = drv), se = FALSE) + geom_point() #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(mpg, aes(x = displ, y = hwy, colour = drv)) + geom_point() + geom_smooth(se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(colour = drv)) + geom_smooth(se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(colour = drv)) + geom_smooth(aes(linetype = drv), se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(size = 4, color = &quot;white&quot;) + geom_point(aes(colour = drv)) 2.7 Statistical Transformations # geoms and stats can be used interchangeably ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) ggplot(data = diamonds) + stat_count(mapping = aes(x = cut)) # override the default stat demo &lt;- tribble( ~cut, ~freq, &quot;Fair&quot;, 1610, &quot;Good&quot;, 4906, &quot;Very Good&quot;, 12082, &quot;Premium&quot;, 13791, &quot;Ideal&quot;, 21551 ) ggplot(data = demo) + geom_bar(mapping = aes(x = cut, y = freq), stat = &quot;identity&quot;) # display a bar chart of proportion ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median ) Exercise 3.7.1 What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function? The default geom for stat_summary() is geom_pointrange() (see the stat) argument. But, the default stat for geom_pointrange() is identity(), so use geom_pointrange(stat = &quot;summary&quot;). ggplot(data = diamonds) + geom_pointrange( mapping = aes(x = cut, y = depth), stat = &quot;summary&quot; ) #&gt; No summary function supplied, defaulting to `mean_se() The default message says that stat_summary() uses the mean and sd to calculate the point, and range of the line. So lets use the previous values of fun.ymin, fun.ymax, and fun.y: ggplot(data = diamonds) + geom_pointrange( mapping = aes(x = cut, y = depth), stat = &quot;summary&quot;, fun.ymin = min, fun.ymax = max, fun.y = median ) Exercise 3.7.2. What does geom_col() do? How is it different to geom_bar()? The geom_col() function has different default than geom_bar(). The default stat of geom_col() isidentity()stat. This means thatgeom_col()expects that the data is already preprocessed intoxvalues andy` values representing the bar height. #fix # ggplot(data = diamonds) + # geom_col(mapping = aes(y = carat)) The defult stat of geom_bar() is count(). This means that geom_bar() expects the x variable to contain multiple observations for each values, and it will handle counting the number of observations for each value of x in order to create the bar heights. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) Exercise 3.7.3. Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common? See the ggplot2 documentation. TODO Exercise 3.7.4. What variables does stat_smooth() compute? What parameters control its behavior? The function stat_smooth() calculates the following statistics: y: predicted value ymin: lower value of the confidence interval ymax: upper value of the confidence interval se: standard error There’s parameters such as method which determines which method is used to calculate the predictions and confidence interval, and some other arguments that are passed to that. # ggplot(data = diamonds) + # geom_bar(mapping = aes(x = cut, y = ..prop..)) # # ggplot(data = diamonds) + # geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..)) Exercise 3.7.5. In our proportion bar chart, we need to set group = 1 Why? In other words what is the problem with these two graphs? If group is not set to 1, then all the bars have prop == 1. The function geom_bar() assumes that the groups are equal to the x values, since the stat computes the counts within the group. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop..)) The problem with these two plots is that the proportions are calculated within the groups. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop..)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..)) This is more likely what was intended: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = color)) 2.8 Position Adjustments ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, colour = cut)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = &quot;identity&quot;) ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) + geom_bar(fill = NA, position = &quot;identity&quot;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;dodge&quot;) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = &quot;jitter&quot;) Exercise 3.8.1.1. What is the problem with this plot? How could you improve it? There is overplotting because there are multiple observations for each combination of cty and hwy. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() Fix by using a jitter position adjustment. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point(position = &quot;jitter&quot;) Exercise 3.8.1.2. What parameters to geom_jitter() control the amount of jittering? From the geom_jitter() documentation, there are two arguments to jitter: width controls the amount of vertical displacement, and height controls the amount of horizontal displacement. The defaults values of width and height will introduce noise in both directions. Here is what the plot looks like with the default values of height and width. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point(position = position_jitter(width = 0)) However, we can adjust them. Here are few examples to understand how adjusting these parameters affects the look of the plot. With width = 0 there is no horizontal jitter. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_jitter(width = 0) With width = 20, there is too much horizontal jitter. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_jitter(width = 20) With height = 0, there is no vertical horizontal jitter: ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_jitter(height = 0) With height = 15, there is too much vertical jitter. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point(height = 15) #&gt; Warning: Ignoring unknown parameters: height Note that the height and width arguments are in the units of the data. Thus height = 1 corresponds to different relative amounts of jittering depending on the scale of the y variable. The default values of height and width are defined to be 80% of the resolution() of the data, which is the smallest non-zero distance between adjacent values of a variable. This means that if x and y are discrete variables, their resolutions are both equal to 1, and height = 0.8 and width = 0.8. Exercise 3.8.1.3. Compare and contrast geom_jitter() with geom_count(). geom_jitter() adds random noise to the locations points of the graph by adding “jitters” the points. This reduces overplotting since points are not likely to have the same location after the random noise is added to their locations. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_jitter() geom_count() resizes the points relative to the number of observations at each location. Points with more observations will be larger than those with fewer observations. ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_count() This method does not change the x and y coordinates of the points. However, if the points are close together and counts are large, the size of some points can itself introduce overplotting. For example, in the following example a third variable mapped to color is added to the plot. In this case, geom_count() is less readable than geom_jitter() when adding a third variable as color aesthetic. ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) + geom_jitter() ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) + geom_count() Unfortunately, there is no universal solution to overplotting. The costs and benefits of different approaches will depend on the structure of the data and the goal of the data scientist. Exercise 3.8.1.4. What’s the default position adjustment for geom_boxplot()? Create a visualization of the mpg dataset that demonstrates it. The default position for geom_boxplot() is position_dodge() (see its docs). When adding colour = class to the box plot, the different classes within drv are placed side by side (dodged). The different classes within drv overlapping with position_identity(). ggplot(data = mpg, aes(x = drv, y = hwy, colour = class)) + geom_boxplot() ggplot(data = mpg, aes(x = drv, y = hwy, colour = class)) + geom_boxplot(position = &quot;identity&quot;) 2.9 Coordinate Systems # coord_flip() switches the x and y axes ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip() # coord_quickmap() sets the aspect ratio correctly for maps nz &lt;- map_data(&quot;nz&quot;) #&gt; #&gt; Attaching package: &#39;maps&#39; #&gt; The following object is masked from &#39;package:purrr&#39;: #&gt; #&gt; map ggplot(nz, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) ggplot(nz, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) + coord_quickmap() bar &lt;- ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) bar + coord_flip() bar + coord_polar() Exercise 3.9.1.1 Turn a stacked bar chart into a pie chart using coord_polar(). Stacked bar chart with a single category ggplot(mpg, aes(x = factor(1), fill = drv)) + geom_bar() See the documentation for coord_polar for an example of making a pie chart. In particular, theta = &quot;y&quot;, meaning that the angle of the chart is the y variable which has to be specified. ggplot(mpg, aes(x = factor(1), fill = drv)) + geom_bar(width = 1) + coord_polar(theta = &quot;y&quot;) If theta = &quot;y&quot; is not specified, then you get a bull’s-eye chart ggplot(mpg, aes(x = factor(1), fill = drv)) + geom_bar(width = 1) + coord_polar() Stacked bar chart with a multiple category ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) Stacked bar chart with a multiple category with polar coordinates results in multi-doughnut chart ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) + coord_polar(theta = &quot;y&quot;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) bar &lt;- ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = clarity), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) # stacked bar chart bar bar + coord_polar() Exercise 3.9.1.2 What does labs() do? Read the documentation. The labs function adds labels for different scales and the title of the plot. See the documentation for labs ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip() + labs(y = &quot;Highway MPG&quot;, x = &quot;&quot;, title = &quot;Highway MPG by car class&quot;) Exercise 3.9.1.3 What’s the difference between coord_quickmap() and coord_map()? coord_map() uses map projection to project 3-dimensional Earth onto a 2-dimensional plane. By default, coord_map() uses the Mercator projection. However, this projection must be applied to all geoms in the plot. coord_quickmap() uses a faster, but approximate map projection. This approximation ignores the curvature of Earth and adjusts the map for the latitude/longitude ratio. This transformation is quicker than coord_map() because the coordinates of the individual geoms do not need to be transformed. The ggplot2 documentation contains more information on and examples for these two functions. Exercise 3.9.1.4 What does the plot below tell you about the relationship between city and highway mpg? Why is coord_fixed() important? What does geom_abline() do? The function coord_fixed() ensures that the line produced by geom_abline() is at a 45 degree angle. The 45 degree line makes it easy to compare the highway and city mileage to the case in which city and highway MPG were equal. p &lt;- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_abline() p + coord_fixed() If we didn’t include geom_coord(), then the line would no longer have an angle of 45 degrees. p On average, humans are best able to perceive differences in angles relative to 45 degrees. See Cleveland (1993b), Cleveland (1994),Cleveland (1993a), Cleveland, McGill, and McGill (1988), Heer and Agrawala (2006) for discussion on how the aspect ratio of a plot affects perception of the values it encodes, evidence that 45 degrees is generally optimal, and methods to calculate the an aspect ratio to achieve it. The function ggthemes::bank_slopes() will calculate the optimal aspect ratio to bank slopes to 45 degrees. 2.10 The Layered Grammar of Graphics No exercises References "]
]
